#Postal Carrier Transistory
#include <iostream>
#include <vector>
#include<queue>

using namespace std;
#define V 5
#define INF 9999

struct envelope
{
int env_loc;
 int del_loc;
};


int dist[V][V];
int del_dist[3];
int env_dist[3];
int flag = 1;
void func(int driv_loc, envelope env[], int del_dist[], int env_dist[], int tot_env)
{


if (flag == 1)


{
for (int i = 0; i < tot_env; i++)
{
env_dist[i] = dist[driv_loc][env[i].env_loc];
}

}
flag = 0;
 int i;
int temp = INF;
 int temp2 = -1;
 int temp3 = -1;
for (int i = 0; i <tot_env; i++)
{
if (temp >= env_dist[i])
{
temp = env_dist[i];
 temp2 = i;
}
}
for (i = 0; i <tot_env; i++)
{
if (temp >= del_dist[i])
{
temp = del_dist[i];
temp3 = i;
}
}
if (temp == INF)
{
return;
}
if (temp3 != -1)
{
cout << temp3 + 1 << " Envelope will be delivered " << endl<<endl;
del_dist[temp3] = INF;
driv_loc = temp3;
for (i = 0; i < tot_env; i++)
{
if (env_dist[i] != INF)
{
env_dist[i] = dist[driv_loc][env[i].env_loc];
}
}
}
else
{
cout << temp2 + 1 << " Envelope will be collected  " << endl<<endl;
driv_loc = temp2;
env_dist[temp2] = INF;
for (i = 0; i < tot_env; i++)
{
if (env_dist[i] != INF)
{
env_dist[i] = dist[driv_loc][env[i].env_loc];
}
}
del_dist[temp2] = dist[driv_loc][env[temp2].del_loc];
}
func(driv_loc, env, del_dist, env_dist, tot_env);
}



void addEdge(vector<pair<int, int>> adj[], int u, int v, int wt)
{
adj[u].push_back(make_pair(v, wt));
 adj[v].push_back(make_pair(u, wt));
}


void printSolution();

void floydWarshall(int graph[][V],bool detectednegativecycle)
{
int i, j, k;
for (i = 0; i < V; i++)
for (j = 0; j < V; j++)
{
dist[i][j] = graph[i][j];
}
for (k = 0; k < V; k++)
{
  for (i = 0; i < V; i++)
{
for (j = 0; j < V; j++)
{

dist[i][j]=min((dist[i][j]),(dist[i][k]+dist[k][j]));
}
}
//for detection of negative cycle
for(int i=0;i<V;i++)
{
    if(dist[i][j]<0)
    {
       detectednegativecycle=1;
       cout<<"Negative cycle detected  giving correct output for one cycle but we should not move further to prevent infinite loop ";
       cout<<endl;
       cout<<endl;
        break;
    }

}
if(detectednegativecycle==1)
    break;



}
printSolution();
}



void dijstra(int src,int graph[][V],bool detectednegativecycle,vector<pair<int, int>>adj[])
{

    int i, j, k;
    for (i = 0; i < V; i++)
    for (j = 0; j < V; j++)
    {
        dist[i][j] = graph[i][j];
    }

     priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;

    vector<int> dist(V, INF);
    pq.push(make_pair(0, src));
    dist[src] = 0;

         while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        vector<pair<int, int> >::iterator it;
        for (it = adj[u].begin(); it!= adj[u].end(); ++it) {

            int v = (*it).first;
            int weight = (*it).second;

            if (dist[v] > dist[u] + weight) {

                dist[v] = dist[u] + weight;
                pq.push(make_pair(dist[v], v));
            }
        }
         }

            cout<<"Vertex Distance from Source ";
            cout<<endl;
            cout<<endl;
    for (int i = 0; i < V; ++i){
       cout<<i<<"     "<<dist[i]<<"   ";
       cout<<endl;
       }
}


void printSolution()
{
cout << "The following matrix shows the shortest distances" " between every pair of vertices \n";
cout<<endl;
for (int i = 0; i < V; i++)
{
for (int j = 0; j < V; j++)
{
if (dist[i][j] == INF) cout << "INF"<<"       ";
else
cout << dist[i][j] << "        ";
}
cout << endl;
}
}




int main()

{
    cout<<endl<<endl<<endl<<endl<<endl<<endl<<endl<<endl<<endl<<endl<<endl<<endl<<endl;
    cout<<"                            ###########################################################             ";
    cout<<endl;
    cout<<endl;
    cout<<endl;
    cout<<endl;
    cout<<"                                                 "<<"POSTAL CARRIER TRANSITORY"<<"                 ";
    cout<<endl;
    cout<<endl;
    cout<<endl;
    cout<<endl;
    cout<<"                            ###########################################################           ";
    cout<<endl;
    cout<<endl;
    cout<<endl;
    cout<<endl<<endl<<endl<<endl<<endl<<endl<<endl<<endl<<endl<<endl<<endl<<endl<<endl;


int a = 5;
int input[a][a];
for (int i = 0; i < a; i++)
{
    for (int j = 0; j < a; j++)
    {
    if (i == j)
    {
    input[i][j] = 0;
    }
    else
    {
    input[i][j] = INF;
    }
}
}
vector<pair<int, int>> adj[a];
//addEdge(adj, 0, 1, 10);
//addEdge(adj, 0, 4, 20);
//addEdge(adj, 1, 2, 30);
//addEdge(adj, 1, 3, 40);
//addEdge(adj, 1, 4, 50);
//addEdge(adj, 2, 3, 60);
//addEdge(adj, 3, 4, 70);
//for negative cycle detection
addEdge(adj, 0, 1, -2);
addEdge(adj, 1, 3, -3);
addEdge(adj, 3, 0, 2);
int v, w;
for (int u = 0; u < a; u++)
{
cout << "Node " << u << " makes an edge with \n"<<endl;
for (auto it = adj[u].begin(); it != adj[u].end(); it++)
{
v = it->first; w = it->second;
for (int i = 0; i < a; i++) input[u][v] = w;
cout << "\tNode " << v << " with edge weight = "
<< w << "\n"<<endl;
}
}
cout << "Matrix is :" << endl<<endl;
 for (int i = 0; i < a; i++)
{
for (int j = 0; j < a; j++)
{
if (input[i][j] == INF)
{
cout << "INF"<<"     ";
}
else
{
cout << input[i][j] << "     ";
}
if (j == 4)
{
cout << endl<<endl;
}
}
}


int graph[V][V];
bool detectednegativecycle=0;
for (int i = 0; i < V; i++)
{
for (int j = 0; j < V; j++)
{
graph[i][j] = input[i][j];
}
}
cout<<" Dijkstra Algorithm : "<<endl;
cout<<endl;
//dijstra(0,graph,detectednegativecycle,adj);
cout<<endl;

cout<<" Floyd Warshall Algorithm : "<<endl<<endl;
floydWarshall(graph,detectednegativecycle);
cout<<endl;

  int dri_loc, tot_env;
cout << "Enter the vertex where the driver is located. Choose from 0,1,2,3,4 " << endl<<endl;
cin >> dri_loc;
cout<<endl;
cout << "Enter no. of envelope " << endl<<endl;

 cin >> tot_env;
 cout<<endl;
envelope env[3];


for (int i = 0; i < tot_env; i++)
{
cout << "Enter the pickup location of  " << i + 1 << " envelope " <<endl<<endl;
cin >> env[i].env_loc;
cout<<endl;
cout << "Enter the delivery location of " << i + 1 << " envelope " <<endl<<endl;
cin >> env[i].del_loc;
cout<<endl;

}
for (int i = 0; i < tot_env; i++)
{
del_dist[i] = INF;
}
func(dri_loc, env, del_dist, env_dist, tot_env);
 return 0;
}
